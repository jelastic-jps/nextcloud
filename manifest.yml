jpsType: install
id: nextcloud
name: Nextcloud
categories:
  - apps/file-management
  - apps/popular
  - apps/file-manager
logo: images/nextcloud-logo.svg
homepage: https://nextcloud.com/
description:
  text: The Nextcloud package deploys a powerful file hosting and content collaboration platform on top of a single container. It provides a wide range of features (including file sharing, synchronization, and collaboration tools) available through a web interface and remote client applications. The Nextcloud package is a great choice for users who want to set up their own cloud storage solution.
  short: Nextcloud is a free and open-source file hosting solution that provides cloud storage, file synchronization, and collaboration features.

baseUrl: https://raw.githubusercontent.com/sych74/nextcloud/master

onBeforeInit: |
    import com.hivext.api.Response;
    import org.yaml.snakeyaml.Yaml;
    import com.hivext.api.core.utils.Transport;

    var lsAppid = "9e6afcf310004ac84060f90ff41a5aba";
    var isLS = jelastic.dev.apps.GetApp(lsAppid);

    var settings = jps.settings;
    var fields = {};
    for (var i = 0, field; field = jps.settings.fields[i]; i++)
      fields[field.name] = field;

    if (isLS.result == 0 || isLS.result == Response.PERMISSION_DENIED) {  
      fields["ls-addon"].hidden = false;
      fields["ls-addon"].value = true;
    } else {
      fields["ls-addon"].hidden = true;
      fields["ls-addon"].value = false;
      fields["ls-addon"].showIf = null;
    }

    return {
        result: 0,
        settings: settings
    };

onBeforeInstall: /scripts/onBeforeInstall.js?_r=${fn.random}
nodes: definedInOnBeforeInstall

skipNodeEmails: true

settings:
  fields:  
    - caption: Advanced Features
      type: displayfield
      markup:
 
    - caption: Install LiteSpeed High-Performance Web Server (Recommended)
      type: checkbox
      name: ls-addon
      value: true
      disabled: false
      tooltip: "If this option is disabled, the cluster will be installed using NGINX load balancer and application servers"
                 
    - caption: Install Let's Encrypt SSL with Auto-Renewal
      type: checkbox
      name: le-addon
      value: true
      disabled: false
      tooltip: "Advanced integration with Let's Encrypt certificate authority that simplifies and automates the process of issuing, configuring and updating trusted custom SSL certificates."

    - type: displayfield
      name: displayfield   
      hideLabel: true
      hidden: true
      markup:


onAfterInstallAddon [nodeGroup:cp, id:letsencrypt-ssl-addon]: setupLEdomain

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      domain: ${event.response.env.domain}
      clone: true

mixins:
  - /configs/vers.yml

globals:
  isSingleDeploy: ${settings.isSingleDeploy:true}
  db_user: ${settings.db_user:user-[fn.random]}
  db_pass: ${settings.db_pass:[fn.password(10)]}
  db_host: ${settings.db_host:127.0.0.1}
  db_name: nc_${fn.random}
  nc_admin_pass: ${settings.nc_admin_pass:[fn.password(10)]}
  protocol: ${settings.protocol:http}
  success: default

onInstall:
  - if (${settings.clone:false}): 
    - setupDomain: ${settings.domain}
  - else:
    - addLimits
    - addMetadata
    - initLEsettings
    - setupNode
    - if (${globals.isSingleDeploy}):
      - getDomain
      - setupProtocol          
      - createUserDB
      - installNextcloud
      - if (${settings.le-addon:false}): 
        - installLEaddon
        - setupLEdomain
      - if ('${settings.success_email}' != 'false'):
        - return:
            type: success
            message: /success/text/success-${globals.success}.md?_r=${fn.random}
            email: /success/email/success-${nodes.cp.master.nodeType}-${globals.success}.md?_r=${fn.random}

actions:
  addLimits:
    - env.control.ApplyNodeGroupData[cp]:
        data:
          validation : 
            maxCount: 1

  addMetadata:
    script: |
      var metadata = { project: "${settings.project:default}", projectScope: "${settings.projectScope:production}" };
      return api.env.control.ApplyEnvProperty ?
        api.env.control.ApplyEnvProperty('${env.name}', session, metadata) :
        api.env.control.ApplyNodeGroupData('${env.name}', session, 'cp', metadata);

  setupProtocol:
    - script: |
        return {
          result:0,
          ssl: jelastic.billing.account.GetQuotas('environment.jelasticssl.enabled').array[0].value
        }
    - if (${response.ssl} || ${settings.le-addon:false}):
        setGlobals:
          protocol: https

  getDomain:
    - script: https://raw.githubusercontent.com/jelastic-jps/common/main/idna.js
      domains: ${env.domain}
    - setGlobals:
        domain: ${response.domains} 

  installLEaddon:
    - install: https://github.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps?_r=${fn.random}
      nodeGroup: cp
      skipEmail: true
      settings:
        test: false
        skipEmail: true
        fallbackToX1: true

  initLEsettings:
    - cmd[cp]: |-
        [ ! -d /var/lib/jelastic/keys/letsencrypt ] && mkdir -p /var/lib/jelastic/keys/letsencrypt;
        echo "test=false" >> /var/lib/jelastic/keys/letsencrypt/settings-custom;
      user: root

  setupDomain:
    - cmd[cp]: |-
        cd /var/www/webroot/ROOT;
        php occ config:system:set overwrite.cli.url --value="https://${this.domain}";
        php occ config:system:set trusted_domains 2 --value="${this.domain}";
        php occ maintenance:repair;

  setupLEdomain:
    - cmd[cp]: |-
        source /opt/letsencrypt/settings;
        cd /var/www/webroot/ROOT;
        php occ config:system:set overwrite.cli.url --value="https://${domain}";
        php occ config:system:set trusted_domains 2 --value="${domain}";
        php occ maintenance:repair;
  
  installNextcloud:
    - install: /scripts/installNextcloud.yml?_r=${fn.random}
      settings:
        db_host: ${globals.db_host}
        db_name: ${globals.db_name}
        db_user: ${globals.db_user}
        db_pass: ${globals.db_pass}
        redis_host: /var/run/redis/redis.sock
        redis_port: 0
        nc_url: ${globals.protocol}://${env.domain}
        nc_admin_pass: ${globals.nc_admin_pass}
        version_nextcloud: ${globals.version_nextcloud}
  
  setupNode:
    - if (/llsmp/.test("${nodes.cp.nodeType}") || /litespeed/.test("${nodes.cp.nodeType}")):
        cmd[cp]: |-
          sed -i 's/^;extension=gd.so/extension=gd.so/' /usr/local/lsws/lsphp/etc/php.d/20-gd.ini;
          sed -i 's/^;extension=intl.so/extension=intl.so/' /usr/local/lsws/lsphp/etc/php.d/20-intl.ini;
          sed -i 's/^;extension=imagick.so/extension=imagick.so/' /usr/local/lsws/lsphp83/etc/php.d/40-imagick.ini;

    - if (/lemp/.test("${nodes.cp.nodeType}") || /nginxphp/.test("${nodes.cp.nodeType}")):
        cmd[cp]: |-
          wget --tries=10 -qO /etc/nginx/conf.d/sites-enabled/default.conf ${baseUrl}/configs/nginx.conf;

    - cmd[cp]: wget --tries=10 -qO /etc/mysql/conf.d/nextcloud.cnf ${baseUrl}/configs/mariadb.cnf;
    
    - cmd[cp]: sudo jem service restart
        
  createUserDB:
    - log: Create user for DataBase
    - cmd [cp]: |-
        wget https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/setupUser.sh -O ~/setupUser.sh >> /var/log/run.log;
        bash ~/setupUser.sh ${globals.db_user} ${globals.db_pass} >> /var/log/run.log;
        jem passwd set -p ${globals.db_pass} >> /var/log/run.log;
      user: root

startPage: ${env.url}
